require 'rake'
require 'my_docker_rake/tasks'
require 'rspec/core/rake_task'
include MyDockerRake::Utilities


RSpec::Core::RakeTask.new(:spec) do |t|
  t.pattern = 'spec/*/*_spec.rb'
end

MyDockerRake::Tasks.new do |c|
  c.containers = [
    {
      name:  'sample_app.db-data',
      image: 'hyone/postgresql-data',
      protect_deletion: true
    },
    {
      name:  'sample_app.db',
      image: 'hyone/postgresql',
      volumes_from: ['sample_app.db-data'],
      ports: [22, 2812, '49200:5432'],
    },
    {
      name: 'sample_app.app',
      image: 'rails/sample-app',
      links: ['sample_app.db:db'],
      ports: [22, 2812, 3000],
    }
  ]
end

APPDIR = 'project'

# prerequisites for docker:build
build_task = Rake.application.lookup('docker:build')
build_task.prerequisites << 'docker:copy'

namespace :docker do
  desc 'copy app distribution to docker build directory'
  task :copy, [:project] do |t, args|
    projects = case
      when args.project           then args.projects.split(/,/)
      when ENV['DOCKER_PROJECTS'] then ENV['DOCKER_PROJECTS'].split(/,/)
      else get_projects('./dockerfiles')
      end

    projects.each do |project|
      sh "rm -rf dockerfiles/#{project}/#{APPDIR}"
      sh "mkdir  dockerfiles/#{project}/#{APPDIR}"
      sh "cp -a `ls -d ../* | grep -v docker` dockerfiles/#{project}/#{APPDIR}"
    end
  end

  desc 'run application tests on docker'
  task :run_test => ['docker:run'] do
    name  = 'sample_app.app-test'
    image = 'rails/sample-app'
    sh <<-EOC
      docker run --rm --name #{name} --link sample_app.db:db #{image} bash -cle '
        eval "$(rbenv init -)"
        bundle install
        bundle exec rake db:drop
        bundle exec rake db:create
        bundle exec rake db:migrate
        bundle exec rake test:prepare
        bundle exec rake spec
      '
    EOC
  end
end

desc 'clean up the projects'
task :clean => ['docker:clean', 'app:clean']

namespace :app do
  desc 'clean up app distributions have been copied in order to build an image'
  task :clean do
    Find.find('dockerfiles')
      .map { |fpath| File.expand_path(::File.join('..', fpath), __FILE__) }
      .select { |path|
        File.directory?(path) and File.basename(path) == APPDIR
      }.each do |path|
        FileUtils.remove_dir(path)
      end
  end
end
